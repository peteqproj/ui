[{"/home/oleg/workspace/peteqproj/ui/src/index.tsx":"1","/home/oleg/workspace/peteqproj/ui/src/serviceWorker.ts":"2","/home/oleg/workspace/peteqproj/ui/src/App.tsx":"3","/home/oleg/workspace/peteqproj/ui/src/services/project.ts":"4","/home/oleg/workspace/peteqproj/ui/src/services/tasks.ts":"5","/home/oleg/workspace/peteqproj/ui/src/services/list.ts":"6","/home/oleg/workspace/peteqproj/ui/src/services/views/backlog.ts":"7","/home/oleg/workspace/peteqproj/ui/src/services/user.ts":"8","/home/oleg/workspace/peteqproj/ui/src/services/views/projects.ts":"9","/home/oleg/workspace/peteqproj/ui/src/services/views/project.ts":"10","/home/oleg/workspace/peteqproj/ui/src/services/views/home.ts":"11","/home/oleg/workspace/peteqproj/ui/src/services/views/triggers.ts":"12","/home/oleg/workspace/peteqproj/ui/src/pages/projects/page.tsx":"13","/home/oleg/workspace/peteqproj/ui/src/pages/project/page.tsx":"14","/home/oleg/workspace/peteqproj/ui/src/pages/home/page.tsx":"15","/home/oleg/workspace/peteqproj/ui/src/pages/empty/page.tsx":"16","/home/oleg/workspace/peteqproj/ui/src/pages/backlog/page.tsx":"17","/home/oleg/workspace/peteqproj/ui/src/pages/triggers/page.tsx":"18","/home/oleg/workspace/peteqproj/ui/src/components/menu/menu.tsx":"19","/home/oleg/workspace/peteqproj/ui/src/components/navbar/navbar.tsx":"20","/home/oleg/workspace/peteqproj/ui/src/services/http.ts":"21","/home/oleg/workspace/peteqproj/ui/src/pages/login/index.tsx":"22","/home/oleg/workspace/peteqproj/ui/src/pages/project/progress.tsx":"23","/home/oleg/workspace/peteqproj/ui/src/pages/projects/new-project-modal/modal.tsx":"24","/home/oleg/workspace/peteqproj/ui/src/components/task/task.tsx":"25","/home/oleg/workspace/peteqproj/ui/src/components/table/index.tsx":"26","/home/oleg/workspace/peteqproj/ui/src/components/fab/index.tsx":"27","/home/oleg/workspace/peteqproj/ui/src/components/fullscreen-dialog/index.tsx":"28","/home/oleg/workspace/peteqproj/ui/src/components/task/title.tsx":"29","/home/oleg/workspace/peteqproj/ui/src/components/task/description.tsx":"30","/home/oleg/workspace/peteqproj/ui/src/components/color-picker/index.tsx":"31","/home/oleg/workspace/peteqproj/ui/src/components/select/index.tsx":"32"},{"size":562,"mtime":1609855467958,"results":"33","hashOfConfig":"34"},{"size":5295,"mtime":1610369198065,"results":"35","hashOfConfig":"34"},{"size":6903,"mtime":1609855467958,"results":"36","hashOfConfig":"34"},{"size":1631,"mtime":1610369206229,"results":"37","hashOfConfig":"34"},{"size":2066,"mtime":1611058770782,"results":"38","hashOfConfig":"34"},{"size":653,"mtime":1610369206229,"results":"39","hashOfConfig":"34"},{"size":668,"mtime":1610369206229,"results":"40","hashOfConfig":"34"},{"size":901,"mtime":1610369206229,"results":"41","hashOfConfig":"34"},{"size":490,"mtime":1610369206229,"results":"42","hashOfConfig":"34"},{"size":515,"mtime":1610369206229,"results":"43","hashOfConfig":"34"},{"size":584,"mtime":1610369206229,"results":"44","hashOfConfig":"34"},{"size":458,"mtime":1610369206229,"results":"45","hashOfConfig":"34"},{"size":6472,"mtime":1609855467958,"results":"46","hashOfConfig":"34"},{"size":5516,"mtime":1611056908482,"results":"47","hashOfConfig":"34"},{"size":11935,"mtime":1611056877210,"results":"48","hashOfConfig":"34"},{"size":178,"mtime":1609855467958,"results":"49","hashOfConfig":"34"},{"size":8033,"mtime":1611056666945,"results":"50","hashOfConfig":"34"},{"size":1668,"mtime":1609855467958,"results":"51","hashOfConfig":"34"},{"size":1463,"mtime":1609855467958,"results":"52","hashOfConfig":"34"},{"size":472,"mtime":1609855467958,"results":"53","hashOfConfig":"34"},{"size":217,"mtime":1610369206229,"results":"54","hashOfConfig":"34"},{"size":2329,"mtime":1609855467958,"results":"55","hashOfConfig":"34"},{"size":676,"mtime":1609855467958,"results":"56","hashOfConfig":"34"},{"size":4181,"mtime":1609855467958,"results":"57","hashOfConfig":"34"},{"size":7607,"mtime":1611056593943,"results":"58","hashOfConfig":"34"},{"size":3959,"mtime":1609855467958,"results":"59","hashOfConfig":"34"},{"size":1875,"mtime":1609855467958,"results":"60","hashOfConfig":"34"},{"size":1971,"mtime":1609855467958,"results":"61","hashOfConfig":"34"},{"size":1169,"mtime":1609855467958,"results":"62","hashOfConfig":"34"},{"size":2021,"mtime":1609855467958,"results":"63","hashOfConfig":"34"},{"size":334,"mtime":1609855467958,"results":"64","hashOfConfig":"34"},{"size":2133,"mtime":1609855467958,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"18nsbww",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},"/home/oleg/workspace/peteqproj/ui/src/index.tsx",[],["138","139"],"/home/oleg/workspace/peteqproj/ui/src/serviceWorker.ts",[],"/home/oleg/workspace/peteqproj/ui/src/App.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/services/project.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/tasks.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/list.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/views/backlog.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/user.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/views/projects.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/views/project.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/views/home.ts",[],"/home/oleg/workspace/peteqproj/ui/src/services/views/triggers.ts",[],"/home/oleg/workspace/peteqproj/ui/src/pages/projects/page.tsx",["140"],"import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Fab from '@material-ui/core/Fab';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Dialog from '@material-ui/core/Dialog';\nimport Fade from '@material-ui/core/Fade';\nimport AddIcon from '@material-ui/icons/Add';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport { Link } from \"react-router-dom\";\nimport { ProjectModal } from './new-project-modal/modal';\nimport { ProjectAPI, Project } from './../../services/project'\nimport { ProjectsViewAPI, ProjectView } from '../../services/views/projects'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: '50%',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\ninterface Column {\n  title: string;\n  minWidth: number;\n}\ninterface Row extends ProjectView {}\nfunction makeColumn(title: string): Column {\n  return {\n    title,\n    minWidth: 30\n  }\n}\n\ninterface IProps  {\n  ProjectAPI: ProjectAPI;\n  ProjectsViewAPI: ProjectsViewAPI;\n}\n\nexport function ProjectsPage(props: IProps) {\n    const classes = useStyles();\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [rows, updateRows] = useState<Row[]>([]);\n    useEffect(() => {\n      const fetch = async () => {\n        const res = await props.ProjectsViewAPI.get()\n        console.log(res)\n        updateRows(res.projects);\n      };\n\n      fetch();\n    }, []);\n    const handleChangePage = (event: unknown, newPage: number) => {\n      setPage(newPage);\n    };\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setRowsPerPage(+event.target.value);\n      setPage(0);\n    };\n    const [projectModal, setProjectModalOpen] = useState(false);\n    const handleProjectModalClose = (data: any) => {\n      setProjectModalOpen(false);\n    };\n    const handleProjectModalOpen = (data: any) => {\n      setProjectModalOpen(true);\n    };\n    const columns = [\n      makeColumn('Actions'),\n      makeColumn('Name'),\n      makeColumn('Description'),\n      makeColumn('Tasks'),\n    ]\n    const addProject = async (row: Row): Promise<void> => {\n      return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve();\n            updateRows((prevState) => {\n              const data = [...prevState];\n              data.splice(0, 0, row)\n              return data;\n            });\n          }, 600);\n      });\n    }\n    return (\n      <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\" size={'small'}>\n          <TableHead>\n              <TableRow>\n                <TableCell key={\"color\"}/>\n                {columns.map((column, index) => (\n                  <TableCell\n                    key={index}\n                  \n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.title}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                  <TableCell key={'c-00'} style={{\n                      backgroundColor: row.metadata.color || 'gray',\n                      width: '2px'\n                    }}>\n                  </TableCell>\n                  <TableCell key={'c-0'}>\n                  <Tooltip title={\"Open\"} aria-label={\"open\"}>\n                      <Link to={`/projects/${row.metadata.id}`}>\n                        <IconButton aria-label=\"toggleProjetView\" color=\"primary\" id={row.metadata.id}>\n                          <OpenInNewIcon/>\n                        </IconButton>\n                      </Link>\n                    </Tooltip>\n                  </TableCell>\n                  <TableCell key={'c-1'}>\n                    {row.metadata.name}\n                  </TableCell>\n                  <TableCell key={'c-2'}>\n                    {row.metadata.description}\n                  </TableCell>\n                  <TableCell key={'c-3'}>\n                    {row.tasks.length}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={1}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n      <Fab\n          color=\"primary\"\n          style={{ position: 'fixed', right: '15px', bottom: '15px' }}\n          onClick={handleProjectModalOpen}\n          >\n            <AddIcon />\n      </Fab>\n      <Dialog\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={projectModal}\n        onClose={handleProjectModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={projectModal}>\n          <ProjectModal Callback={(project: Project) => {\n            setProjectModalOpen(false)\n            const row: Row = {\n              ...project,\n              objects: [],\n            }\n            addProject(row)\n          }} ProjectAPI={props.ProjectAPI}></ProjectModal>\n        </Fade>\n      </Dialog>\n    </Paper>\n    )\n}","/home/oleg/workspace/peteqproj/ui/src/pages/project/page.tsx",["141"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { RouteComponentProps } from \"react-router-dom\";\nimport DoneIcon from '@material-ui/icons/Done';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport { Table, RowMenuItem } from './../../components/table';\nimport { Fab } from './../../components/fab';\nimport { Task as TaskComponent } from './../../components/task/task';\nimport { FullScreenDialog } from './../../components/fullscreen-dialog';\nimport { ProjectAPI } from './../../services/project'\nimport { Task, TaskAPI } from './../../services/tasks'\nimport { List, ListAPI } from './../../services/list'\nimport { ProjectViewAPI, ProjectView } from './../../services/views/project'\nimport { Progress } from './progress';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n  },\n  content: {\n    width: '100%'\n  },\n  media: {\n    height: 320,\n    width: 320\n  },\n});\n\n\ninterface IProps extends RouteComponentProps {\n  id?: string;\n  ProjectAPI: ProjectAPI;\n  ProjectViewAPI: ProjectViewAPI;\n  TaskAPI: TaskAPI;\n  ListAPI: ListAPI;\n}\n\nexport function ProjectPage(props: IProps) {\n  const classes = useStyles();\n  const projectId = (props.match.params as any)['id'];\n  const [lists, updateLists] = useState<List[]>([])\n  const [state, setState] = useState({\n    metadata: {\n      name: '',\n      id: '',\n      description: '',\n      color: '',\n      imageUrl: '',\n    }, tasks: []\n  } as ProjectView);\n  useEffect(() => {\n    const fetch = async () => {\n      const prj = await props.ProjectViewAPI.get(projectId)\n      setState(prj)\n      const l = await props.ListAPI.list()\n      updateLists(l);\n    }\n    fetch();\n\n  }, [props.ProjectAPI, projectId]);\n\n  return (\n    <Card className={classes.root} >\n      <CardContent className={classes.content}>\n        <CardHeader component={() => (<Chip style={{ width: '70px', backgroundColor: state.metadata.color }} />)} />\n        <Typography gutterBottom variant=\"h3\" component=\"h2\">\n          {state.metadata.name}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n          {state.metadata.description} {calculateCompleted(state.tasks)} / {state.tasks.length}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          <Progress value={calculateProgress(state.tasks)} />\n          <Table\n            columns={[{ title: 'Name' }, { title: 'Description' }, { title: 'Status' }]}\n            data={\n              state.tasks.map(t => ({\n                data: [\n                  { content: t.metadata.name },\n                  { content: t.metadata.description },\n                  { content: t.status.completed ? 'Completed' : '' },\n                ],\n                menu: [\n                  makeTaskCompletionButton(t, async (index: number, action: string) => {\n                    if (action === 'Reopen') {\n                      await props.TaskAPI.reopen(t.metadata.id);\n                    }\n\n                    if (action === 'Complete') {\n                      await props.TaskAPI.complete(t.metadata.id);\n                    }\n                    const view = await props.ProjectViewAPI.get(projectId);\n                    setState(view);\n                  })\n                ],\n              }))\n            }\n          />\n        </Typography>\n      </CardContent>\n      {state.metadata.imageUrl !== '' && <CardMedia\n        className={classes.media}\n        image={state.metadata.imageUrl}\n        title=\"Contemplative Reptile\"\n      />}\n      <Fab\n        includeFade={false}\n        modal={\n          <FullScreenDialog\n            onClose={() => console.log('closed')}\n            component={\n              <TaskComponent\n                onChange={async () => {\n                  const view = await props.ProjectViewAPI.get(projectId);\n                  setState(view);\n                }}\n                defaultProject={{ name: state.metadata.name, id: state.metadata.id }}\n                projects={[\n                  { name: state.metadata.name, id: state.metadata.id }\n                ]}\n                lists={lists.map(l => ({ name: l.metadata.name, id: l.metadata.id }))}\n                new={true}\n                task={{ metadata: { id: '', name: '', description: '' }, spec: {}, status: { completed: false } }}\n                TaskAPI={props.TaskAPI}\n                ListAPI={props.ListAPI}\n              />\n            }\n          />\n        }\n      />\n    </Card>\n  );\n}\n\nfunction calculateProgress(tasks: Task[]): number {\n  const completed = calculateCompleted(tasks);\n  const total = tasks.length;\n  return (completed / total) * 100\n}\n\nfunction calculateCompleted(tasks: Task[]): number {\n  return tasks.reduce((acc, curr) => {\n    if (curr.status.completed) {\n      return acc + 1\n    }\n    return acc;\n  }, 0)\n}\n\nfunction makeTaskCompletionButton(task: Task, onClick: (index: number, action: string) => void): RowMenuItem {\n  const icon = task.status.completed ? UndoIcon : DoneIcon;\n  const action = !task.status.completed ? 'Complete' : 'Reopen';\n  return {\n    title: action,\n    icon: icon,\n    onClick: (index: number) => onClick(index, action),\n  };\n}  \n","/home/oleg/workspace/peteqproj/ui/src/pages/home/page.tsx",["142","143"],"import React, { useEffect, useState } from 'react'\nimport Bluebird from 'bluebird';\nimport { get, cloneDeep } from 'lodash';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport { HomeViewAPI, HomeViewModel, HomeViewTask } from '../../services/views/home';\nimport { TaskAPI, Task } from \"./../../services/tasks\";\nimport { ListAPI, List } from \"./../../services/list\";\nimport { ProjectAPI, Project } from \"./../../services/project\";\nimport { Task as TaskComponent } from './../../components/task/task';\nimport { FullScreenDialog } from './../../components/fullscreen-dialog';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        height: 800,\n        width: 300,\n        backgroundColor: '#80808047',\n        overflow: 'auto'\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    control: {\n        padding: theme.spacing(5),\n    },\n    listTitle: {\n        paddingTop: 10,\n        paddingBottom: 10,\n    },\n    card: {\n        display: 'flex',\n        maxHeight: 200,\n        marginBottom: 5,\n        borderLeftStyle: 'outset',\n        borderLeftWidth: '10px',\n    },\n    progress: {\n        display: 'flex',\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n    addCard: {\n        position: 'relative',\n        bottom: '45px',\n        left: '250px'\n    }\n}),\n);\n\ninterface IProps {\n    TaskAPI: TaskAPI;\n    ListAPI: ListAPI;\n    ProjectAPI: ProjectAPI;\n    HomeViewAPI: HomeViewAPI;\n}\n\nexport function HomePage(props: IProps) {\n    const classes = useStyles();\n    const [showNewTask, setShowNewTask] = useState(false);\n    const [newTaskListIndex, setNewTaskListIndex] = useState(-1);\n    const [newTaskName, setNewTaskName] = useState(\"\");\n    const [showTaskModal, setShowTaskModal] = useState(false);\n    const [taskModal, setTaskModal] = useState<Task>({} as Task);\n    const [state, setState] = useState<HomeViewModel>({ lists: [] });\n    const [ selectedTaskListIndex, setSelectedTaskListIndex ] = useState(-1);\n    const [ selectedTaskProjectIndex, setSelectedTaskProjectIndex ] = useState(-1);\n    const [ projects, updateProjects ] = useState<Project[]>([]);\n\n    useEffect(() => {\n        (async () => {\n            const view = await props.HomeViewAPI.get();\n            setState(view);\n            const projects = await props.ProjectAPI.list();\n            updateProjects(projects);\n        })()\n    }, [])\n\n    const onDragEnd = (drag: DropResult) => {\n        const { source, destination } = drag;\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        let task: Task\n        const lists = cloneDeep(state.lists);\n        lists.forEach(list => {\n            if (list.metadata.id !== source.droppableId) {\n                return\n            }\n            task = list.tasks.splice(source.index, 1)[0]\n        });\n        lists.forEach(list => {\n            if (list.metadata.id !== destination.droppableId) {\n                return\n            }\n            list.tasks.splice(destination.index, 0, task)\n        })\n        const fetchAndUpdate = async () => {\n            await props.ListAPI.moveTasks(source.droppableId, destination.droppableId, [task.metadata.id])\n            setState(() => ({ lists }));\n        };\n        fetchAndUpdate()\n\n    }\n\n    const onShowNewTask = (index: number) => {\n        setShowNewTask(true);\n        setNewTaskListIndex(index);\n    }\n\n    const onAddTask = (list: string, index: number) => {\n        return async (e: any) => {\n            if (e.keyCode !== 13) {\n                return;\n            }\n            const task = await props.TaskAPI.create({ name: newTaskName });\n            await Bluebird.delay(2000)\n            await props.ListAPI.moveTasks('', list, [task.metadata.id]);\n            setShowNewTask(true);\n            setNewTaskName('')\n            setState((prev) => {\n                const s = cloneDeep(prev);\n                s.lists[index].tasks.push(task)\n                return s;\n            })\n\n        }\n    };\n\n    const onTaskClick = (task: HomeViewTask, listIndex: number) => {\n        setShowTaskModal(true);\n        setTaskModal(task);\n        setSelectedTaskListIndex(listIndex)\n        const id = task.project?.metadata.id;\n        if (!id) {\n            return\n        }\n        projects.map((p, i) => {\n            if (p.metadata.id !== id) {\n                return p\n            }\n            setSelectedTaskProjectIndex(i);\n            return p\n        })\n    }\n    return (\n        <Grid container className={classes.root}>\n            <Grid item xs={12}>\n                <Grid container justify=\"center\" spacing={10}>\n                    <DragDropContext onDragEnd={onDragEnd}>\n                        {state.lists.map((list, listIndex) => (\n                            <Droppable key={listIndex} droppableId={list.metadata.id}>\n                                {(provided, snapshot) => (\n                                    <Grid key={list.metadata.id} item ref={provided.innerRef}>\n                                        <Paper className={classes.paper} elevation={3}>\n                                            <Container fixed>\n                                                <div className={classes.listTitle}>{list.metadata.name}</div>\n                                                {(list.tasks || []).map((task, index) => (\n                                                    <Draggable\n                                                        index={index}\n                                                        key={task.metadata.id}\n                                                        draggableId={task.metadata.id}>\n                                                        {(provided, snapshot) => (\n                                                            <Card\n                                                                onClick={() => onTaskClick(task, listIndex)}\n                                                                {...provided.draggableProps}\n                                                                {...provided.dragHandleProps}\n                                                                ref={provided.innerRef}\n                                                                className={classes.card}\n                                                                style={{\n                                                                    borderLeftColor: get(task, 'project.metadata.color', 'gray'),\n                                                                    ...provided.draggableProps.style\n                                                                }}>\n                                                                <CardContent>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        {task.metadata.name}\n                                                                    </Typography>\n                                                                </CardContent>\n                                                            </Card>\n                                                        )}\n                                                    </Draggable>\n                                                ))}\n                                                {showNewTask && newTaskListIndex === listIndex && <Card className={classes.card}>\n                                                    <CardContent>\n                                                        <TextField onBlur={(e: any) => {\n                                                            if (e.currentTarget.contains(e.relatedTarget)) {\n                                                                return\n                                                            }\n                                                            setShowNewTask(false)\n                                                        }} autoFocus onKeyDown={onAddTask(list.metadata.id, listIndex)} onChange={(ev: any) => setNewTaskName(ev.target.value)} value={newTaskName} />\n                                                    </CardContent>\n                                                </Card>}\n                                            </Container>\n                                        </Paper>\n                                        {provided.placeholder}\n                                        <IconButton onClick={() => onShowNewTask(listIndex)} aria-label=\"add\" color=\"primary\" className={classes.addCard}>\n                                            <AddIcon />\n                                        </IconButton>\n                                    </Grid>\n                                )}\n                            </Droppable>\n                        ))}\n                    </DragDropContext>\n                </Grid>\n                <Dialog\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={showTaskModal}\n                    onClose={() => setShowTaskModal(false)}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                        <FullScreenDialog\n                            onClose={\n                                () => console.log('closed')\n                            }\n                            component={\n                            <TaskComponent\n                                onChange={async () => {\n                                    const view = await props.HomeViewAPI.get()\n                                    setState(view)\n                                }}\n                                projects={projects.map(p => ({ id: p.metadata.id, name: p.metadata.name }))}\n                                defaultProject={\n                                    {\n                                        id: get(projects, `[${selectedTaskProjectIndex}].metadata.id`),\n                                        name: get(projects, `[${selectedTaskProjectIndex}].metadata.name`),\n                                    }\n                                }\n                                defaultList={\n                                    {\n                                        id: get(state, `lists[${selectedTaskListIndex}].metadata.id`),\n                                        name: get(state, `lists[${selectedTaskListIndex}].metadata.name`),\n                                    }\n                                }\n                                lists={state.lists.map(l => ({ id: l.metadata.id, name: l.metadata.name }))}\n                                new={false}\n                                task={taskModal}\n                                TaskAPI={props.TaskAPI}\n                                ListAPI={props.ListAPI}\n                            />\n                        }\n                    />\n                </Dialog>\n            </Grid>\n        </Grid>\n    );\n}\n\n","/home/oleg/workspace/peteqproj/ui/src/pages/empty/page.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/pages/backlog/page.tsx",["144","145","146","147","148"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { cloneDeep, get, concat, isUndefined } from \"lodash\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport { TaskAPI, Task } from \"./../../services/tasks\";\nimport { ListAPI, List } from \"./../../services/list\";\nimport { ProjectAPI } from \"./../../services/project\";\nimport { BacklogViewAPI, BacklogList, BacklogTask, BacklogProject } from \"../../services/views/backlog\";\nimport { FullScreenDialog } from './../../components/fullscreen-dialog';\nimport { Fab } from './../../components/fab';\nimport { Task as TaskComponent } from './../../components/task/task';\nimport { Table as TableComponent, RowMenuItem } from './../../components/table';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  container: {\n    height: '100%',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\ninterface IProps {\n  TaskAPI: TaskAPI;\n  ListAPI: ListAPI;\n  ProjectAPI: ProjectAPI;\n  BacklogViewAPI: BacklogViewAPI;\n}\n\ninterface Row extends BacklogTask { }\n\ninterface IState {\n  lists: BacklogList[];\n  projects: BacklogProject[];\n}\n\nfunction makeTaskCompletionButton(row: Row, onClick: (action: string) => void): RowMenuItem {\n  const icon = row.status.completed ? UndoIcon : DoneIcon;\n  const title = !row.status.completed ? 'Complete' : 'Reopen'\n  return {\n    title,\n    icon,\n    onClick: () => onClick(title),\n  }\n}\n\nexport function BacklogPage(props: IProps) {\n  const classes = useStyles();\n  const [selectedTaskIndex, updateSelectedTaskIndex] = useState(-1);\n  const [taskEdit, updateTaskEdit] = useState<Task | undefined>();\n\n  const [rows, updateRows] = useState<Row[]>([]);\n  const [state, setState] = useState<IState>(() => {\n    return {\n      lists: [],\n      projects: [],\n    }\n  });\n\n  const [lists, updateLists] = useState<List[]>([])\n\n  useEffect(() => {\n    (async () => {\n      const view = await props.BacklogViewAPI.get()\n      const state: IState = {\n        lists: view.lists,\n        projects: view.projects,\n      }\n      setState(state)\n      updateRows(view.tasks)\n\n      const l = await props.ListAPI.list()\n      updateLists(l);\n    })()\n  }, [props.ListAPI, props.TaskAPI, props.BacklogViewAPI])\n\n  const onUpdate = async (newData: Row, oldData?: Row): Promise<any> => {\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n        updateRows((prevState) => {\n          let index;\n          for (let i = 0; i < prevState.length; i++) {\n            const element = prevState[i];\n            if (element.metadata.id === newData.metadata.id) {\n              index = i\n            }\n          }\n          // index does not found, return previous state\n          if (isUndefined(index)) {\n            return prevState\n          };\n          const data = [...prevState];\n          data[index] = newData;\n          return data;\n        });\n      }, 600);\n    });\n  }\n\n  const deleteTask = async (row: Row): Promise<void> => {\n    await props.TaskAPI.remove(row.metadata.id)\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n        updateRows((prevState) => {\n          let index;\n          for (let i = 0; i < prevState.length; i++) {\n            const element = prevState[i];\n            if (element.metadata.id === row.metadata.id) {\n              index = i\n            }\n          }\n          // index does not found, return previous state\n          if (isUndefined(index)) {\n            return prevState\n          };\n          const data = [...prevState];\n          data.splice(index, 1)\n          return data;\n        });\n      }, 600);\n    });\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <TableComponent\n        columns={[\n          { title: \"Title\" },\n          { title: \"Description\" },\n          { title: \"List\" },\n          { title: \"Project\" },\n        ]}\n        data={rows.map(r => {\n          return {\n            data: [\n              {\n                content: r.metadata.name,\n              },\n              {\n                content: r.metadata.description,\n              },\n              {\n                content: r.list.name,\n              },\n              {\n                content: r.project.name,\n              },\n            ],\n            onClick: (r: number) => {\n              updateSelectedTaskIndex(r);\n              updateTaskEdit(rows[r])\n            },\n            menu: [\n              makeTaskCompletionButton(r, async (action: string) => {\n                if (action === 'Reopen') {\n                  await props.TaskAPI.reopen(r.metadata.id);\n                }\n\n                if (action === 'Complete') {\n                  await props.TaskAPI.complete(r.metadata.id);\n                }\n                const newRow = cloneDeep(r)\n                newRow.status.completed = !newRow.status.completed\n                onUpdate(newRow, r)\n              }),\n              {\n                icon: DeleteIcon,\n                onClick: (i: number) => {\n                  deleteTask(rows[i]);\n                },\n                title: 'Delete'\n              }\n            ],\n          }\n        })}\n      />\n      { selectedTaskIndex !== -1 &&\n        <FullScreenDialog\n          onClose={() => {\n            updateSelectedTaskIndex(-1);\n          }}\n          component={\n            <TaskComponent\n              onChange={async () => {\n                const view = await props.BacklogViewAPI.get()\n                updateRows(view.tasks)\n              }}\n              defaultList={{\n                id: rows[selectedTaskIndex].list.id,\n                name: rows[selectedTaskIndex].list.name,\n              }}\n              defaultProject={{\n                id: rows[selectedTaskIndex].project.id,\n                name: rows[selectedTaskIndex].project.name,\n              }}\n              projects={state.projects.map(p => ({ name: p.name, id: p.id }))}\n              lists={lists.map(l => ({ name: l.metadata.name, id: l.metadata.id }))}\n              new={false}\n              task={taskEdit as Task}\n              TaskAPI={props.TaskAPI}\n              ListAPI={props.ListAPI}\n            />\n          }\n        />\n      }\n      <Fab\n        includeFade={false}\n        modal={\n          <FullScreenDialog\n          onClose={() => {\n            updateSelectedTaskIndex(-1);\n          }}\n          component={\n            <TaskComponent\n              onChange={async () => {\n                const view = await props.BacklogViewAPI.get()\n                updateRows(view.tasks)\n              }}\n              defaultList={{\n                id: get(rows, `[${selectedTaskIndex}].list.id`),\n                name: get(rows, `[${selectedTaskIndex}].list.name`),\n              }}\n              defaultProject={{\n                id: get(rows, `[${selectedTaskIndex}].project.id`),\n                name: get(rows, `[${selectedTaskIndex}].project.name`),\n              }}\n              projects={state.projects.map(p => ({ name: p.name, id: p.id }))}\n              lists={lists.map(l => ({ name: l.metadata.name, id: l.metadata.id }))}\n              new={true}\n              task={{ metadata: { id: '', name: '', description: '' }, spec: {}, status: { completed: false } }}\n              TaskAPI={props.TaskAPI}\n              ListAPI={props.ListAPI}\n            />\n          }\n          />\n        }\n      />\n    </Paper>\n  )\n}\n","/home/oleg/workspace/peteqproj/ui/src/pages/triggers/page.tsx",["149"],"import React, { useEffect, useState } from 'react'\nimport { Table as TableComponent } from './../../components/table';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport { TriggersViewAPI, TriggerView } from './../../services/views/triggers';\n\ninterface IProps {\n    data: string;\n    TriggersViewAPI: TriggersViewAPI;\n}\n\ninterface RowItem extends TriggerView {};\n\nexport function TriggersPage(props: IProps) {\n    const [rows, updateRows] = useState<RowItem[]>([]);\n    useEffect(() => {\n        const fetch = async () => {\n          const res = await props.TriggersViewAPI.get()\n          updateRows(res.triggers)\n        };\n        fetch();\n      }, []);\n    return ( <TableComponent\n        columns={[\n          { title: \"Name\" },\n          { title: \"Description\" },\n          { title: \"Type\" },\n          { title: \"Spec\" },\n        ]}\n        data={rows.map(r => {\n          return {\n            data: [\n              {\n                content: r.name,\n              },\n              {\n                content: r.description,\n              },\n              {\n                content: r.type,\n              },\n              {\n                content: r.spec,\n              },\n            ],\n            menu: [\n                {\n                    icon: PlayCircleFilledIcon,\n                    onClick: (i: number) => {},\n                    title: 'Run Manually'\n                },\n                {\n                icon: DeleteIcon,\n                onClick: (i: number) => {},\n                title: 'Delete'\n                },\n            ],\n          }\n        })}\n      /> )\n}","/home/oleg/workspace/peteqproj/ui/src/components/menu/menu.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/navbar/navbar.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/services/http.ts",[],"/home/oleg/workspace/peteqproj/ui/src/pages/login/index.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/pages/project/progress.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/pages/projects/new-project-modal/modal.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/task/task.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/table/index.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/fab/index.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/fullscreen-dialog/index.tsx",["150","151","152","153","154"],"import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n  }),\n);\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"left\" ref={ref} {...props} />;\n});\n\n\ninterface IProps {\n    onClose(): void;\n    component: React.ReactNode;\n}\n\nexport function FullScreenDialog(props: IProps) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n    props.onClose();\n  };\n\n  return (\n      <Dialog fullScreen open={open} style={{ marginLeft: '30%', maxWidth: \"70%\" }} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}/>\n            <IconButton edge=\"end\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        {props.component}\n      </Dialog>\n  );\n}\n","/home/oleg/workspace/peteqproj/ui/src/components/task/title.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/task/description.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/color-picker/index.tsx",[],"/home/oleg/workspace/peteqproj/ui/src/components/select/index.tsx",["155"],"import React, { useState } from 'react';\nimport { get } from \"lodash\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MSelect from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n    },\n}));\n\ninterface IProps {\n    value?: string;\n    items: SelectionItem[];\n    onSelectionChanged(ev: SelectionChangedEvent): void;\n    className?: string;\n    disabled?: boolean;\n}\n\ninterface SelectionItem {\n    value: string;\n    title: string;\n}\n\nexport interface SelectionChangedEvent {\n    destination?: {\n        title: string;\n        value: string;\n    }\n}\n\nconst UnsetSelection = {\n    title: 'Not Exist',\n    value: '__unset__'\n}\n\nexport function Select(props: IProps) {\n    const classes = useStyles();\n    const [selected, setSelected] = useState(props.value || UnsetSelection.value)\n    return (\n        <FormControl className={classes.formControl}>\n            <MSelect\n                disabled={props.disabled}\n                value={selected}\n                className={props.className}\n                onChange={(event: React.ChangeEvent<{ name?: string; value: unknown }>, child: React.ReactNode) => {\n                    const value = get(child, 'props.value', UnsetSelection.value);\n                    const title = get(child, 'props.children', UnsetSelection.title);\n\n                    if (value === UnsetSelection.value) {\n                        props.onSelectionChanged({});\n                        return;\n                    }\n                    setSelected(value);\n                    props.onSelectionChanged({ destination: { value, title }});\n                }}\n            >\n                {props.items.concat([UnsetSelection]).map((item, i) => {\n                    return (\n                        <MenuItem key={i} value={item.value}>{item.title}</MenuItem>\n                    )\n                })}\n            </MSelect>\n        </FormControl>\n    )\n}\n\n",{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":78,"column":8,"nodeType":"162","endLine":78,"endColumn":10,"suggestions":"163"},{"ruleId":"160","severity":1,"message":"164","line":66,"column":6,"nodeType":"162","endLine":66,"endColumn":35,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":19,"column":19,"nodeType":"168","messageId":"169","endLine":19,"endColumn":23},{"ruleId":"160","severity":1,"message":"170","line":94,"column":8,"nodeType":"162","endLine":94,"endColumn":10,"suggestions":"171"},{"ruleId":"166","severity":1,"message":"172","line":3,"column":26,"nodeType":"168","messageId":"169","endLine":3,"endColumn":32},{"ruleId":"166","severity":1,"message":"173","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":14},{"ruleId":"166","severity":1,"message":"174","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":16},{"ruleId":"166","severity":1,"message":"175","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":19},{"ruleId":"166","severity":1,"message":"176","line":8,"column":8,"nodeType":"168","messageId":"169","endLine":8,"endColumn":18},{"ruleId":"160","severity":1,"message":"177","line":22,"column":10,"nodeType":"162","endLine":22,"endColumn":12,"suggestions":"178"},{"ruleId":"166","severity":1,"message":"179","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":14},{"ruleId":"166","severity":1,"message":"180","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":20},{"ruleId":"166","severity":1,"message":"181","line":6,"column":8,"nodeType":"168","messageId":"169","endLine":6,"endColumn":16},{"ruleId":"166","severity":1,"message":"167","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":12},{"ruleId":"166","severity":1,"message":"182","line":8,"column":8,"nodeType":"168","messageId":"169","endLine":8,"endColumn":15},{"ruleId":"166","severity":1,"message":"176","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":18},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.ProjectsViewAPI'. Either include it or remove the dependency array.","ArrayExpression",["185"],"React Hook useEffect has missing dependencies: 'props.ListAPI' and 'props.ProjectViewAPI'. Either include them or remove the dependency array.",["186"],"@typescript-eslint/no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'props.HomeViewAPI' and 'props.ProjectAPI'. Either include them or remove the dependency array.",["187"],"'concat' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","React Hook useEffect has a missing dependency: 'props.TriggersViewAPI'. Either include it or remove the dependency array.",["188"],"'Button' is defined but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [props.ProjectsViewAPI]",{"range":"197","text":"198"},"Update the dependencies array to be: [props.ProjectAPI, projectId, props.ProjectViewAPI, props.ListAPI]",{"range":"199","text":"200"},"Update the dependencies array to be: [props.HomeViewAPI, props.ProjectAPI]",{"range":"201","text":"202"},"Update the dependencies array to be: [props.TriggersViewAPI]",{"range":"203","text":"204"},[2322,2324],"[props.ProjectsViewAPI]",[2007,2036],"[props.ProjectAPI, projectId, props.ProjectViewAPI, props.ListAPI]",[3130,3132],"[props.HomeViewAPI, props.ProjectAPI]",[733,735],"[props.TriggersViewAPI]"]